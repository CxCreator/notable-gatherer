'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class NotableGathererPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // Add command to gather notables and actions
            this.addCommand({
                id: 'gather-notables-and-actions',
                name: 'Notables and Actions',
                editorCallback: (editor, ctx) => {
                    this.gatherNotablesAndActions(editor);
                }
            });
        });
    }
    gatherNotablesAndActions(editor) {
        // Get the current content
        const content = editor.getValue();
        const lines = content.split('\n');
        // Find the sections
        const notablesIndex = lines.findIndex(line => line.trim() === 'Notables:');
        const actionsIndex = lines.findIndex(line => line.trim() === 'Actions:');
        // Collect all lines starting with -> and ->>
        const notableLines = lines
            .filter(line => line.trim().startsWith('->') && !line.trim().startsWith('->>'))
            .filter((line, index, self) => self.indexOf(line) === index); // Remove duplicates
        const actionLines = lines
            .filter(line => line.trim().startsWith('->>'))
            .filter((line, index, self) => self.indexOf(line) === index); // Remove duplicates
        let updatedLines = [...lines];
        let offset = 0; // Track position changes as we modify the document
        // Handle Notables section
        if (notablesIndex === -1) {
            // Create new Notables section at the top
            const newNotablesLines = ['Notables:'];
            if (notableLines.length > 0) {
                newNotablesLines.push(...notableLines);
            }
            newNotablesLines.push('');
            // Remove any leading blank lines
            while (updatedLines.length > 0 && updatedLines[0].trim() === '') {
                updatedLines.shift();
                offset--;
            }
            // Add Notables section at the top
            updatedLines.unshift(...newNotablesLines);
            offset += newNotablesLines.length;
        }
        else {
            // Update existing Notables section
            let insertIndex = notablesIndex + 1;
            // Remove existing notables
            while (insertIndex < updatedLines.length &&
                (updatedLines[insertIndex].trim().startsWith('->') || updatedLines[insertIndex].trim() === '')) {
                updatedLines.splice(insertIndex, 1);
                offset--;
            }
            // Insert collected notables
            if (notableLines.length > 0) {
                updatedLines.splice(insertIndex, 0, ...notableLines);
                offset += notableLines.length;
                // Ensure blank line after section
                if (insertIndex + notableLines.length < updatedLines.length &&
                    updatedLines[insertIndex + notableLines.length].trim() !== '') {
                    updatedLines.splice(insertIndex + notableLines.length, 0, '');
                    offset++;
                }
            }
        }
        // Handle Actions section
        const adjustedActionsIndex = actionsIndex === -1 ? -1 : actionsIndex + offset;
        if (adjustedActionsIndex === -1) {
            // Create new Actions section after Notables
            const newActionsLines = ['Actions:'];
            if (actionLines.length > 0) {
                newActionsLines.push(...actionLines);
            }
            newActionsLines.push('');
            // Find where to insert Actions section (after Notables section)
            const insertIndex = notablesIndex === -1 ? notableLines.length + 2 : 0;
            updatedLines.splice(insertIndex, 0, ...newActionsLines);
        }
        else {
            // Update existing Actions section
            let insertIndex = adjustedActionsIndex + 1;
            // Remove existing actions
            while (insertIndex < updatedLines.length &&
                (updatedLines[insertIndex].trim().startsWith('->>') || updatedLines[insertIndex].trim() === '')) {
                updatedLines.splice(insertIndex, 1);
            }
            // Insert collected actions
            if (actionLines.length > 0) {
                updatedLines.splice(insertIndex, 0, ...actionLines);
                // Ensure blank line after section
                if (insertIndex + actionLines.length < updatedLines.length &&
                    updatedLines[insertIndex + actionLines.length].trim() !== '') {
                    updatedLines.splice(insertIndex + actionLines.length, 0, '');
                }
            }
        }
        // Update the editor content
        editor.setValue(updatedLines.join('\n'));
        // Show notification
        const message = `Gathered ${notableLines.length} notables and ${actionLines.length} actions`;
        new obsidian.Notice(message);
    }
}

module.exports = NotableGathererPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
